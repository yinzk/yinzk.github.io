{"meta":{"title":"怡然阁","subtitle":"足践霜雪底；锹斩荆棘根","description":"","author":"yinzk","url":"https://yinzk.github.io","root":"/"},"pages":[{"title":"Categories","date":"2020-04-03T00:44:01.000Z","updated":"2020-04-03T00:44:01.000Z","comments":true,"path":"categories/index.html","permalink":"https://yinzk.github.io/categories/index.html","excerpt":"","text":""},{"title":"Gallery","date":"2020-04-03T00:47:29.000Z","updated":"2020-04-03T00:47:29.000Z","comments":true,"path":"gallery/index.html","permalink":"https://yinzk.github.io/gallery/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸 漫威 关于漫威的图片 OH MY GIRL 关于OH MY GIRL的图片"},{"title":"About","date":"2020-04-05T01:19:18.000Z","updated":"2020-04-05T01:19:18.000Z","comments":true,"path":"about/index.html","permalink":"https://yinzk.github.io/about/index.html","excerpt":"","text":""},{"title":"友情鏈接","date":"2020-04-03T00:46:15.000Z","updated":"2020-04-03T00:46:15.000Z","comments":true,"path":"link/index.html","permalink":"https://yinzk.github.io/link/index.html","excerpt":"","text":""},{"title":"Gallery","date":"2020-04-03T00:47:29.000Z","updated":"2020-04-03T00:47:29.000Z","comments":true,"path":"movies/index.html","permalink":"https://yinzk.github.io/movies/index.html","excerpt":"","text":""},{"title":"Music","date":"2020-10-16T10:46:15.000Z","updated":"2020-10-16T10:46:15.000Z","comments":true,"path":"music/index.html","permalink":"https://yinzk.github.io/music/index.html","excerpt":"","text":"音乐列表 var options = {\"narrow\":false,\"autoplay\":true,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"813px\",\"music\":[{\"title\":\"Johnny Boy\",\"author\":\"Santiano\",\"lrc\":\"lrc/Johnny_Boy.lrc\",\"pic\":\"https://p1.music.126.net/RC1Of2fVpajcAY46mkSFwg==/18361844183958427.jpg?param=130y130\",\"url\":\"https://m7.music.126.net/20201028131926/dd4b3c4cb258bfd4d38ef58918b0d33a/ymusic/obj/w5zCgMODwrDDjD3DisKy/1606449715/5636/4005/a221/248012ec0e439d9fc4d360e25c243aa7.m4a\"},{\"title\":\"Johnny Boy\",\"author\":\"Santiano\",\"lrc\":\"lrc/Johnny_Boy.lrc\",\"pic\":\"https://p1.music.126.net/RC1Of2fVpajcAY46mkSFwg==/18361844183958427.jpg?param=130y130\",\"url\":\"/music/Santiano-Johnny_Boy.m4a\"},{\"title\":\"戏影\",\"author\":\"彭十六\",\"url\":\"/music/彭十六 戏影.mp3\",\"pic\":\"\"},{\"title\":\"The way\",\"author\":\"just_me\",\"url\":\"/music/The_way.m4a\",\"pic\":\"\"}]}; options.element = document.getElementById(\"aplayer-DrFTwcqB\"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 单独纯音乐 var ap = new APlayer({ element: document.getElementById(\"aplayer-WuQEYCVh\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Lemon\", author: \"米津玄师\", url: \"https://m701.music.126.net/20201009194904/5ba18ca6eb714e38cc33d79bc74d6991/jdyyaac/525f/0058/0e08/e512cd13a07213af30889be104707506.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); var ap = new APlayer({ element: document.getElementById(\"aplayer-HABPAaMh\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Lemon\", author: \"米津玄师\", url: \"Lemon-米津玄师.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 单文件 1&#123;% aplayer &quot;戏影&quot; &quot;彭十六&quot; &quot;/music/彭十六 戏影.mp3&quot; %&#125; 播放列表： 123456789101112131415161718192021222324252627&#123;% aplayerlist %&#125;&#123; &quot;narrow&quot;: false, // Optional, narrow style &quot;autoplay&quot;: false, // Optional, autoplay song(s), not supported by mobile browsers &quot;mode&quot;: &quot;random&quot;, // Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation` &quot;showlrc&quot;: 3, // Optional, show lrc, can be 1, 2, 3 &quot;mutex&quot;: true, // Optional, pause other players when this player playing &quot;theme&quot;: &quot;#e6d0b2&quot;, // Optional, theme color, default: #b7daff &quot;preload&quot;: &quot;metadata&quot;, // Optional, the way to load music, can be &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, default: &#x27;auto&#x27; &quot;listmaxheight&quot;: &quot;513px&quot;, // Optional, max height of play list &quot;music&quot;: [ &#123; &quot;title&quot;: &quot;CoCo&quot;, &quot;author&quot;: &quot;Jeff Williams&quot;, &quot;url&quot;: &quot;caffeine.mp3&quot;, &quot;pic&quot;: &quot;caffeine.jpeg&quot;, &quot;lrc&quot;: &quot;caffeine.txt&quot; &#125;, &#123; &quot;title&quot;: &quot;アイロニ&quot;, &quot;author&quot;: &quot;鹿乃&quot;, &quot;url&quot;: &quot;irony.mp3&quot;, &quot;pic&quot;: &quot;irony.jpg&quot; &#125; ]&#125;&#123;% endaplayerlist %&#125;"},{"title":"Tags","date":"2020-04-03T00:46:15.000Z","updated":"2020-04-03T00:46:15.000Z","comments":true,"path":"tags/index.html","permalink":"https://yinzk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Redis 知识整理","slug":"Redis-学习笔记","date":"2021-10-24T14:21:00.000Z","updated":"2021-10-24T14:21:00.000Z","comments":true,"path":"posts/3fecb9b0.html","link":"","permalink":"https://yinzk.github.io/posts/3fecb9b0.html","excerpt":"","text":"Redis 知识整理1、 redis 内存模型、单线程、Redis性能高的原因。 Redis指令处理逻辑 1234567891011Redis 基于Reactor模式开发了一个名为 File Event Handler 的网络事件处理器；这个事件处理器是单线程的，所以称Redis 是单线程的。Redis 核心是通过IO多路复用的方式监听多个socket，并根据socket传输的事件类型将事件分发给不同的事件处理器处理。Redis的核心模块包含四个：被监听的多个Socket、IO多路复用程序、事件分派器、事件处理器。IO多路复用程序通过将会将有事件的多个socket 放入队列，每次取出一个socket，并根据事件类型通过事件分派器将事件分给对应的事件处理器处理；每次处理一个，处理完一个取一个；以上，便是redis处理命令的基本逻辑。 高性能原因： 12345而 Redis 性能高的原因可以分为以下三点：1、纯内存操作2、采用非阻塞的IO多路复用所以快3、单线程方式由于没有多线程方式需要来回切换上下文的操作，所以快。 2、 缓存的三大问题 缓存雪崩、缓存击穿、缓存穿透 与解决办法 缓存雪崩：缓存在某段时间内大面积失效，后面的请求都落在db上，导致数据库短时间承受大量请求进而崩溃。 解决办法（4个） 将缓存的过期时间设置的随即些，以防止缓存同一时间大面积失效。 在缓存中追加缓存字段，当缓存失效，则更新缓存。 缓存预热（即，针对项目启动时，缓存中无数据的场景，此时应从数据库中取出数据使用并缓存，而后的请求便可以直接使用缓存数据）。 使用互斥锁。（即保证接受到多个请求时，只有一个请求操作缓存，当缓存失效取出db中的数据以更新缓存；之后的请求，可以使用缓存）。 缓存击穿： 123 缓存中不存在数据，数据库中存在数据，而并发用户数增加，同时请求某一条这样的数据，同时从缓存中未取到数据，又同时从数据库中取，进而导致数据库短时间接受的请求增多，压力增大； 缓存击穿 说的是针对同一数据的并发量增大，导致db压力增大；缓存雪崩 说的是不同数据同时国旗，导致db接受请求增多，压力增大。 解决办法（2个）： 将热数据的有效期设为永不过期 使用互斥锁。 缓存穿透：缓存中无数据，数据库中也无数据，此时所有的请求均落在db上，导致数据库承受大量请求进而崩溃 解决办法（3个）： 接口层增加逻辑校验，例如权限校验、id！&lt;=0 等，以期望拦截无效请求。 针对 缓存、db都没有的数据，以key-null 的形式缓存；并设置较短的有效期（太长可能会影响性能）。 使用布隆过滤器，即将所有可能的数据hash并放入足够大的bitmap；接受到请求后，判断请求对应的hash是否在bitmap中，如果没有则拦截（ 有请求，必有hash在bitmap，有hash 在bitmap不一定有数据，原因：hash算法存在hash碰撞（即：不同的数据，hash后的值可能存在相同））","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/categories/Elasticsearch/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://yinzk.github.io/tags/Redis/"},{"name":"性能优化","slug":"性能优化","permalink":"https://yinzk.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"常识","slug":"常识","permalink":"https://yinzk.github.io/tags/%E5%B8%B8%E8%AF%86/"},{"name":"解决办法","slug":"解决办法","permalink":"https://yinzk.github.io/tags/%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"}]},{"title":"FFMPEG 使用笔记","slug":"FFMPEG 使用笔记","date":"2021-08-23T06:02:16.000Z","updated":"2021-08-23T06:02:16.000Z","comments":true,"path":"posts/a6f2a32b.html","link":"","permalink":"https://yinzk.github.io/posts/a6f2a32b.html","excerpt":"","text":"FFMPEG 使用笔记视频压缩 改变帧率 12# -r 20：表示帧率设置为 20fpsffmpeg -i Desktop/吉他.mp4 -r 20 Desktop/output1.mp4 指定文件大小 123# fs 20 : 表示文件大小最大值为15MB# 把视频截了一部分 --- 这种方法不行ffmpeg -i Desktop/吉他.mp4 -fs 15MB Desktop/output1.mp4 改变分辨率 12# -s vga : 指定分辨率， vga 代表 600*480，也可以换成其他的值ffmpeg -i Desktop/1.mov -s vga Desktop/1.mp4 改变码率 1234567#视频的原码率是 2.1Mb/s ，压缩为 1.5Mb/s#-b:v 1.5M : 指定码率#-b:v :指定视频的码率#-b:a : 指定音频的码率#1.5M：码率的值 1.5M 表示 1.5Mb/s#当码率设置为小于 1.5Mb/s 后视频的清晰度会降低很多ffmpeg -i Desktop/1.mov -b:v 1.5M Desktop/1.mp4 视频合并 使用文件列表进行视频合并: filelist.list12345file &#x27;./index1.mp4&#x27;file &#x27;./index2.mp4&#x27;file &#x27;./index3.mp4&#x27;file &#x27;./index4.mp4&#x27;file &#x27;./index5.mp4&#x27; 命令：12# ffmpeg 合并视频流ffmpeg -f concat -i filelist.list -c copy target.mkv 视频转码提速123456789#假设原始指令为：ffmpeg -i movie.mp4 -vf &quot;crop=640:256:0:400&quot; -strict -2 YourCroppedMovie.mp4#那么启用多线程后的指令：ffmpeg -i movie.mp4 -vf &quot;crop=640:256:0:400&quot; -threads 5 -preset ultrafast -strict -2 YourCroppedMovie.mp4#仔细观察，其实核心参数是：-threads 5 -preset ultrafast 参考链接 视频转码、剪切、合并、播放速调整 视频剪辑 ffmpeg 常用命令","categories":[{"name":"技术图谱","slug":"技术图谱","permalink":"https://yinzk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://yinzk.github.io/tags/Java/"},{"name":"学习路线","slug":"学习路线","permalink":"https://yinzk.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"小米手环4 设置自定义壁纸教程","slug":"外设美化-手环自定义壁纸设置教程","date":"2021-04-03T14:43:00.000Z","updated":"2021-04-03T14:43:00.000Z","comments":true,"path":"posts/4a3d913b.html","link":"","permalink":"https://yinzk.github.io/posts/4a3d913b.html","excerpt":"","text":"小米手环4 设置自定义壁纸教程简介离线同步 被替换了的表盘bin文件，实现自定义报表的设置。 工具 米环4自定义表盘.apk 小米运动.apk Android 文件传输工具 MacBook 流程 用手机连接手环4，并在表盘商城中 下载一款官方的手环主题，以 遨游太空 壁纸为例，对应壁纸在手机的路径如下： 表盘存储位置路径：Android/data/com.xiaomi.hm.health/files/watch_skin_local/AVOBRGR4h4OpaZ5y1EDCIj8VSGpAqUYsGqVKLfr5`` 从米环4自定义表盘上下载自己中意的主题表盘，或自己定义一个，并更名为：AVOBRGR4h4OpaZ5y1EDCIj8VSGpAqUYsGqVKLfr5.bin 使用下载下来的表盘bin文件替换第一步中下载的表盘bin文件， 手机断网情况下，再次同步第一步中下载的表盘。 DONE","categories":[{"name":"外设","slug":"外设","permalink":"https://yinzk.github.io/categories/%E5%A4%96%E8%AE%BE/"}],"tags":[{"name":"外设","slug":"外设","permalink":"https://yinzk.github.io/tags/%E5%A4%96%E8%AE%BE/"},{"name":"主题美化","slug":"主题美化","permalink":"https://yinzk.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}]},{"title":"Java 工程师技术图谱","slug":"Java 工程师技术图谱","date":"2020-12-23T06:02:16.000Z","updated":"2020-12-23T06:02:16.000Z","comments":true,"path":"posts/1cf4dfe4.html","link":"","permalink":"https://yinzk.github.io/posts/1cf4dfe4.html","excerpt":"","text":"Java 工程师技术图谱","categories":[{"name":"技术图谱","slug":"技术图谱","permalink":"https://yinzk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://yinzk.github.io/tags/Java/"},{"name":"学习路线","slug":"学习路线","permalink":"https://yinzk.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"搜索引擎验证文件","slug":"搜索引擎验证文件","date":"2020-10-16T06:02:16.000Z","updated":"2020-10-16T06:02:16.000Z","comments":true,"path":"posts/3049498579.html","link":"","permalink":"https://yinzk.github.io/posts/3049498579.html","excerpt":"","text":"主题设置笔记github google: google706d32e9060c21ea.html baidu: baidu_verify_code-cXkaljdsGR.htmlgitee baidu: baidu_verify_code-NJEszMZUL0.html","categories":[{"name":"Themes","slug":"Themes","permalink":"https://yinzk.github.io/categories/Themes/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://yinzk.github.io/tags/HEXO/"},{"name":"检索收录","slug":"检索收录","permalink":"https://yinzk.github.io/tags/%E6%A3%80%E7%B4%A2%E6%94%B6%E5%BD%95/"}]},{"title":"Elasticsearch乐观锁并发控制实战","slug":"ES-单条记录更新（带乐观锁）","date":"2020-08-27T13:34:36.000Z","updated":"2020-08-27T13:34:36.000Z","comments":true,"path":"posts/2448362671.html","link":"","permalink":"https://yinzk.github.io/posts/2448362671.html","excerpt":"","text":"Elasticsearch乐观锁并发控制实战主要参数及技术点 Elasticsearch 乐观锁技术 Elasticsearch 参数： version:(6.7.0 之后被弃用,需采用第二种方式) if_seq_no &amp; if_primary_term ： 概念解释： 悲观锁控制（悲观并发控制） 12345678910/** * TODO * 总是假设最坏的情况，每次去拿数据的时候都认为别人会修改， * 所以每次在拿数据的时候都会上锁，这样别人想拿这个数 * 据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用， * 其它线程阻塞，用完后再把资源转让给其它线程）。 * 传统的关系型数据库里边就用到了很多这种锁机制， * 比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。 * Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。 */ 乐观锁控制 12345678910/** * TODO * 总是假设最好的情况，每次去拿数据的时候都认为别人不会修改， * 所以不会上锁，但是在更新的时候会判断一下在此期间别人有 * 没有去更新这个数据，可以使用版本号机制和CAS算法实现。 * 乐观锁适用于多读的应用类型，这样可以提高吞吐量， * 像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。 * 在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了 * 乐观锁的一种实现方式CAS实现的。 */ 操作 原数据准备 12345curl -XPUT &#x27;elasticsearch_host:9200/note_index/_doc/1&#x27; -H &#x27;Content-Type:application/json&#x27; -d&#x27;&#123; &quot;tilte&quot; : &quot;init title&quot;&#125;&#x27; First: 两客户端获取上述记录 (record._version=1 or _seq_no=1) 1234567891011121314151617181920212223# requestcurl -XGET &#x27;elasticsearch_host:9200/note_index/_doc/1&#x27;# response# _version: 6.7.0 前的版本控制字段# _seq_no: 6.7.0 及以后的版本控制字段# _primary_term: 6.7.0 及以后的版本控制字段# response&#123; &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;failed&quot; : 0, &quot;successful&quot; : 1 &#125;, &quot;_index&quot; : &quot;note_index&quot;, &quot;_type&quot; : &quot;_doc&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 2, &quot;result&quot; : &quot;created&quot;&#125; if_seq_no Second: 两个客户端依次更新记录 6.7.0 前使用version 进行版本控制 123456789101112131415161718# client 1:# client 1 requestcurl -XPUT &#x27;elasticsearch_host:9200/note_index/_doc/1?version=&lt;record.version&gt;&#x27; -H &#x27;Content-Type:application/json&#x27; -d&#x27;&#123; &quot;tilte&quot; : &quot;init title&quot;&#125;&#x27;# client 1 responsesuccess# client 2:# client 2 requestcurl -XPUT &#x27;elasticsearch_host:9200/note_index/_doc/1?version=&lt;record.version&gt;&#x27; -H &#x27;Content-Type:application/json&#x27; -d&#x27;&#123; &quot;tilte&quot; : &quot;init title&quot;&#125;&#x27;# client 2 responseerror: version conflict 6.7.0 及之后使用 if_seq_no , if_primary_term 进行版本控制。 1234567/** * TODO 原文描述 * 1. The sequence number and the primary term uniquely identify a change. By noting down the sequence number * and primary term returned, you can make sure to only change the document if no other change was made to it since you retrieved it. * This is done by setting the if_seq_no and if_primary_term parameters of either the Index API or the Delete API. * */ 1234567891011121314151617181920# client 1:# client 1 requestcurl -XPUT &#x27;elasticsearch_host:9200/note_index/_doc/1?if_seq_no=&lt;_seq_no&gt;&amp;if_primary_term=&lt;_primary_term&gt;&#x27; -H &#x27;Content-Type:application/json&#x27; -d&#x27;&#123; &quot;tilte&quot; : &quot;init title&quot;&#125;&#x27;# client 1 responsesuccess# client 2:# client 2 requestcurl -XPUT &#x27;elasticsearch_host:9200/note_index/_doc/1?if_seq_no=&lt;_seq_no&gt;&amp;if_primary_term=&lt;_primary_term&gt;&#x27; -H &#x27;Content-Type:application/json&#x27; -d&#x27;&#123; &quot;tilte&quot; : &quot;init title&quot;&#125;&#x27;# client 2 responseerror: version conflict Third: 更新重试 1234567/** * TODO * 1. 更新报错的客户端，需要重新获取记录的记录版本， * 2. 重新进行业务逻辑处理。 * 3. 更新重试。（如果仍旧失败，返回 “1. 更新报错。。。”步，再一次进行更新重试直至更新成功）。 * */ 注意:若想记录被更新后,能及时检索到,需要设置refresh参数为:wait_for,该参数所有取值如下: false: Don’t refresh after this request. The default. true: Force a refresh as part of this request. This refresh policy does not scale for high indexing or search throughput but is usefulto present a consistent view to for indices with very low traffic. And it is wonderful for tests! wait_for: Leave this request open until a refresh has made the contents of this request visible to search. This refresh policy iscompatible with high indexing and search throughput but it causes the request to wait to reply until a refresh occurs. 参考连接参考连接:Elasticsearch Reference [7.9] » REST APIs » Document APIs » ?refreshElasticsearch Document《Optimistic concurrency control》elasticsearch学习笔记（十三）——Elasticsearch乐观锁并发控制实战Elasticsearch系列—并发控制及乐观锁实现原理","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/categories/Elasticsearch/"}],"tags":[{"name":"高端操作","slug":"高端操作","permalink":"https://yinzk.github.io/tags/%E9%AB%98%E7%AB%AF%E6%93%8D%E4%BD%9C/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/tags/Elasticsearch/"},{"name":"Lock/CRUD","slug":"Lock-CRUD","permalink":"https://yinzk.github.io/tags/Lock-CRUD/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-01T00:44:01.000Z","updated":"2020-04-01T00:44:01.000Z","comments":true,"path":"posts/1243066710.html","link":"","permalink":"https://yinzk.github.io/posts/1243066710.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Themes","slug":"Themes","permalink":"https://yinzk.github.io/categories/Themes/"}],"tags":[{"name":"Demo","slug":"Demo","permalink":"https://yinzk.github.io/tags/Demo/"}]},{"title":"ES 批处理命令","slug":"ES-批量数据创建","date":"2020-01-16T03:15:36.000Z","updated":"2020-01-16T03:15:36.000Z","comments":true,"path":"posts/3452262424.html","link":"","permalink":"https://yinzk.github.io/posts/3452262424.html","excerpt":"","text":"ES 批处理命令操作流程流程 以批量更新数据为例 1、 数据准备 data.json 12&#123;&quot;update&quot;: &#123;&quot;_index&quot;: &quot;cdr_20191108&quot;, &quot;_type&quot;: &quot;cdr&quot;, &quot;_id&quot;: &quot;1100036-f773d51bdac2461eb6b4e66579b33e6c-1573179699.5&quot;&#125;&#125;&#123;&quot;script&quot;: &#123;&quot;source&quot;: &quot;def hitDeathItem = false;ctx._source.next_cdr_delayed = params.nextCdrDelayed;if (params.nextCdrDelayed == 1) &#123;ctx._source.auto_items.add(params.autoItem);for (result in ctx._source.qc_result_score) &#123;if (result.hit !== null &amp;&amp; result.hit == 1) &#123;hitDeathItem = true;&#125;if (result.item == params.autoItem.item) &#123;result.score = result.score + params.autoItem.score;&#125;&#125;ctx._source.qc_score = hitDeathItem ? 0 : ctx._source.qc_score + params.autoItem.score;&#125;&quot;, &quot;params&quot;: &#123;&quot;nextCdrDelayed&quot;: 1, &quot;autoItem&quot;: &#123;&quot;item&quot;: &quot;过程语&quot;, &quot;message&quot;: &quot;评语:话单延迟追加&quot;, &quot;record_type&quot;: 0, &quot;revise_type&quot;: 3, &quot;score&quot;: -1, &quot;type&quot;: 8, &quot;weight&quot;: 27&#125;, &quot;status&quot;: 32&#125;&#125;&#125; 2、命令执行 ssh 1curl &#x27;localhost:9200/_bulk?pretty&#x27; --data-binary @data.json -H &#x27;Content-Type:application/json&#x27; &gt; result.json 批量操作分类： 批量创建 数据格式： 12&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;tt&quot;,&quot;_type&quot;:&quot;ttt&quot;,&quot;_id&quot;:&quot;100&quot;&#125;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;&#125; 批量删除 数据格式： 1&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;lib&quot;,&quot;_type&quot;:&quot;books&quot;,&quot;_id&quot;:&quot;4&quot;&#125;&#125; 批量更新 数据格式： 1234&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;lib&quot;,&quot;_type&quot;:&quot;books&quot;,&quot;_id&quot;:&quot;4&quot;&#125;&#125; //更新动作不能缺失_id，文档不存在更新将会失败&#123;&quot;doc&quot;:&#123;&quot;price&quot;:58&#125;&#125;&#123;&quot;update&quot;: &#123;&quot;_index&quot;: &quot;cdr_20191108&quot;, &quot;_type&quot;: &quot;cdr&quot;, &quot;_id&quot;: &quot;1100036-f773d51bdac2461eb6b4e66579b33e6c-1573179699.5&quot;&#125;&#125;&#123;&quot;script&quot;: &#123;&quot;source&quot;: &quot;def hitDeathItem = false;ctx._source.next_cdr_delayed = params.nextCdrDelayed;if (params.nextCdrDelayed == 1) &#123;ctx._source.auto_items.add(params.autoItem);for (result in ctx._source.qc_result_score) &#123;if (result.hit !== null &amp;&amp; result.hit == 1) &#123;hitDeathItem = true;&#125;if (result.item == params.autoItem.item) &#123;result.score = result.score + params.autoItem.score;&#125;&#125;ctx._source.qc_score = hitDeathItem ? 0 : ctx._source.qc_score + params.autoItem.score;&#125;&quot;, &quot;params&quot;: &#123;&quot;nextCdrDelayed&quot;: 1, &quot;autoItem&quot;: &#123;&quot;item&quot;: &quot;过程语&quot;, &quot;message&quot;: &quot;评语:话单延迟追加&quot;, &quot;record_type&quot;: 0, &quot;revise_type&quot;: 3, &quot;score&quot;: -1, &quot;type&quot;: 8, &quot;weight&quot;: 27&#125;, &quot;status&quot;: 32&#125;&#125;&#125; 混合操作 示例： 1234567&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;lib&quot;,&quot;_type&quot;:&quot;books&quot;,&quot;_id&quot;:&quot;4&quot;&#125;&#125; //删除的批量操作不需要请求体&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;tt&quot;,&quot;_type&quot;:&quot;ttt&quot;,&quot;_id&quot;:&quot;100&quot;&#125;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;&#125; //请求体&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;tt&quot;,&quot;_type&quot;:&quot;ttt&quot;&#125;&#125; //没有指定_id，elasticsearch将会自动生成_id&#123;&quot;name&quot;:&quot;zhaosi&quot;&#125; //请求体&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;lib&quot;,&quot;_type&quot;:&quot;books&quot;,&quot;_id&quot;:&quot;4&quot;&#125;&#125; //更新动作不能缺失_id，文档不存在更新将会失败&#123;&quot;doc&quot;:&#123;&quot;price&quot;:58&#125;&#125; //请求体","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/categories/Elasticsearch/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/tags/Elasticsearch/"},{"name":"批处理","slug":"批处理","permalink":"https://yinzk.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"}]},{"title":"Elasticsearch 聚合问题解决","slug":"ES-聚合常见问题与解决","date":"2019-12-28T07:00:00.000Z","updated":"2019-12-28T07:00:00.000Z","comments":true,"path":"posts/ea08f298.html","link":"","permalink":"https://yinzk.github.io/posts/ea08f298.html","excerpt":"","text":"Elasticsearch 聚合问题解决数据不全ES 聚合 - 时区问题ES 在进行聚合是，对时间进行格式化的时候采用的是东八区的计时方式，导致聚合结果存在遗漏， 解决办法，指定time_zone为 +08:00 实例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;size&quot;: 0, &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;filter&quot;: [ &#123; &quot;range&quot;: &#123; &quot;createTime&quot;: &#123; &quot;from&quot;: 1577462400, &quot;to&quot;: 1577548799, &quot;include_lower&quot;: true, &quot;include_upper&quot;: true, &quot;boost&quot;: 1.0 &#125; &#125; &#125; ], &quot;adjust_pure_negative&quot;: true, &quot;boost&quot;: 1.0 &#125; &#125;, &quot;_source&quot;: false, &quot;aggregations&quot;: &#123; &quot;enterpriseIdTerms&quot;: &#123; &quot;date_histogram&quot;: &#123; &quot;field&quot;: &quot;createTime&quot;, &quot;format&quot;: &quot;yyyy-MM-dd&quot;, &quot;interval&quot;: &quot;1d&quot;, &quot;offset&quot;: 0, &quot;order&quot;: &#123; &quot;_key&quot;: &quot;asc&quot; &#125;, &quot;time_zone&quot;: &quot;+08:00&quot;, &quot;keyed&quot;: false, &quot;min_doc_count&quot;: 0 &#125;, &quot;aggregations&quot;: &#123; &quot;callCount&quot;: &#123; &quot;value_count&quot;: &#123; &quot;field&quot;: &quot;uniqueId&quot; &#125; &#125; &#125; &#125; &#125;&#125; 对应Java代码 12345678910111213141516// jestClient 客户端DateHistogramAggregationBuilder dateAggregation = AggregationBuilders.dateHistogram(&quot;dateAggregations&quot;) // 聚合字段 .field(&quot;createTime&quot;) // 聚合维度 .dateHistogramInterval(DateHistogramInterval.DAY) // 聚合格式 .format(&quot;yyyy-MM-dd&quot;) // 默认为0 .minDocCount(0L) // 按时间正序 .order(Histogram.Order.KEY_ASC) // 聚合时区 .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone(&quot;GMT+8&quot;))) // 子聚合 .subAggregation(AggregationBuilders.count(StatFieldEnum.CALL_COUNT.getKey()).field(CtiCloudCdrField.UNIQUE_ID)); 123456789101112// 博客提供的java实例，不确定是否是restClient 客户端。AggregationBuilder dateAggs = AggregationBuilders .dateHistogram(&quot;dateAggs&quot;) // 别名 .field(&quot;@timestamp&quot;) // 指定聚合哪个时间字段 .interval(DateHistogramInterval.DAY) // 按天聚合 .minDocCount(0L) // 默认为0 .order(Histogram.Order.KEY_ASC) // 按时间正序 .timeZone(&quot;+08:00&quot;) // 指定时区 .subAggregation( // 子聚合 AggregationBuilders .sum(&quot;sumAggs&quot;) .field(&quot;tx_count&quot;)); 基础聚合ES 对doc中的字段先计算后聚合 不废话直接上语句 需求：对personName = hero 的数据 value1 进行数据量统计，（不到一百按一百算）。 123456789101112131415&#123; &quot;size&quot;: 0, &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;personName&quot;: &quot;hero&quot; &#125; &#125;, &quot;aggregations&quot;: &#123; &quot;duration&quot;: &#123; &quot;sum&quot;: &#123; &quot;script&quot;: &quot;(params._source.value1/100 + (params._source.value1%100!=0?1:0))*100&quot; &#125; &#125; &#125;&#125; ES 获取聚合结果的去重总数： ES 去重计数：cardinality（count(distinct)） 针对ES索引统计某个字段上出现的不同值的个数时，可以使用cardinality聚合查询完成: request1234567891011121314151617GET http://localhost:9200/cdr_202103*/_searchContent-Type: application/json&#123; &quot;aggregations&quot;: &#123; &quot;count&quot;: &#123; &quot;cardinality&quot;: &#123; &quot;field&quot;: &quot;enterpriseId&quot; &#125; &#125;, &quot;count2&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;enterpriseId&quot; &#125; &#125; &#125;&#125; ES nested 字段聚合ES nested 子聚合ES 对nested字段的某个属性聚合时,有时候,需要计算 记录数,而不是在nested字段数组中出现的次数时;可以使用reverse_nested语句实现需求.reverse_nested语句,可以在nested子聚合的前提下,查询上层聚合的数据属性信息.查询nested字段上层的别的属性. nested 子字段聚合时，聚合上层数据 示例 12345678910111213141516171819202122232425262728293031curl -XGET &#x27;localhost:9200/ticket_202001*/_search&#x27; -H &#x27;Content-Type:application&#x27; -d&#x27;&#123; &quot;size&quot;:0, &quot;aggregations&quot;:&#123; &quot;record&quot;:&#123; &quot;nested&quot;: &#123; &quot;path&quot;: &quot;record&quot; &#125;, &quot;aggregations&quot;:&#123; &quot;recordNo&quot;:&#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;record.no&quot;, &quot;size&quot;: 10 &#125;, &quot;aggregations&quot;: &#123; &quot;thinkCount&quot;:&#123; &quot;reverse_nested&quot;:&#123;&#125;, &quot;aggregations&quot;:&#123; &quot;ids&quot;:&#123; &quot;terms&quot;:&#123; &quot;field&quot;:&quot;uniqueId&quot; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125;&#125;&#x27; ES nested 字段size 获取 示例 12345678910111213141516171819curl -XGET &#x27;localhost:9200/ticket_*/_search?pretty&#x27; -H &#x27;Content-Type:application/json&#x27; -d&#x27;&#123; &quot;size&quot;: 0, &quot;aggregations&quot;: &#123; &quot;ticketIds&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;uniqueId&quot; &#125;, &quot;aggregations&quot;: &#123; &quot;taskCount&quot;: &#123; &quot;sum&quot;: &#123; &quot;script&quot;: &quot;params._source.record.size()&quot; &#125;, &quot;size&quot;: 100 &#125; &#125; &#125; &#125;&#125;&#x27; ES 桶聚合与分页聚合ES 聚合结果过滤、分页、排序 - bucket_filter(过滤)、bucket_sort(排序、截取)。存在版本制约，&gt;6.0.0 语句示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; &quot;size&quot;: 0, &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;filter&quot;: [ &#123; &quot;term&quot;: &#123; &quot;type&quot;: &quot;my_record&quot; &#125; &#125; ], &quot;adjust_pure_negative&quot;: true, &quot;boost&quot;: 1.0 &#125; &#125;, &quot;_source&quot;: false, &quot;aggregations&quot;: &#123; &quot;dateTerm&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;uniqueId&quot;, &quot;size&quot;: 3000, &quot;min_doc_count&quot;: 1, &quot;shard_min_doc_count&quot;: 0, &quot;show_term_doc_count_error&quot;: false &#125;, &quot;aggregations&quot;: &#123; &quot;recordCount&quot;: &#123; &quot;value_count&quot;: &#123; &quot;field&quot;: &quot;uniqueId&quot; &#125; &#125;, &quot;bucket_filter&quot;: &#123; &quot;bucket_selector&quot;: &#123; &quot;buckets_path&quot;: &#123; &quot;recordCount&quot;: &quot;recordCount &gt; _count&quot; &#125;, &quot;script&quot;: &quot;params.recordCount &lt; 100&quot; &#125; &#125;, &quot;bucket_sort&quot;: &#123; &quot;bucket_sort&quot;: &#123; &quot;sort&quot;: [ &#123; &quot;recordCount&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125; &#125; ], &quot;size&quot;: 10, &quot;from&quot;: 0 &#125; &#125; &#125; &#125; &#125;&#125; ES 聚合结果分页 技术点：bucket_sort(分页操作)、cardinality(总数计算) 先决条件： 12ES 结构： &#123;city, humanCount&#125;需求：统计 分页统计每个city的人口情况 分析语句： 123456789101112131415161718192021222324252627282930313233343536373839404142&#123; &quot;size&quot;: 0, &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;, &quot;aggregations&quot;: &#123; &quot;dateTerm&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;city&quot;, &quot;size&quot;: 3000, &quot;min_doc_count&quot;: 1, &quot;shard_min_doc_count&quot;: 0, &quot;show_term_doc_count_error&quot;: false &#125;, &quot;aggregations&quot;: &#123; &quot;humanCount&quot;: &#123; &quot;value_count&quot;: &#123; &quot;field&quot;: &quot;city&quot; &#125; &#125;, &quot;bucket_sort&quot;: &#123; &quot;bucket_sort&quot;: &#123; &quot;sort&quot;: [ &#123; &quot;humanCount&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125; &#125; ], &quot;size&quot;: 10, &quot;from&quot;: 0 &#125; &#125; &#125; &#125;, &quot;totalCount&quot;: &#123; &quot;cardinality&quot;: &#123; &quot;filed&quot;: &quot;city&quot; &#125; &#125; &#125;&#125; 参考信息 参考链接： ES 聚合时区问题解决","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/categories/Elasticsearch/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/tags/Elasticsearch/"},{"name":"Aggregations","slug":"Aggregations","permalink":"https://yinzk.github.io/tags/Aggregations/"},{"name":"Script","slug":"Script","permalink":"https://yinzk.github.io/tags/Script/"},{"name":"Nested","slug":"Nested","permalink":"https://yinzk.github.io/tags/Nested/"},{"name":"Paging","slug":"Paging","permalink":"https://yinzk.github.io/tags/Paging/"}]},{"title":"PSQL 数据库数据的导入导出","slug":"DB 数据操作","date":"2019-01-23T06:36:36.000Z","updated":"2019-01-23T06:36:36.000Z","comments":true,"path":"posts/1902165761.html","link":"","permalink":"https://yinzk.github.io/posts/1902165761.html","excerpt":"","text":"数据库操作PSQL数据库操作:服务器数据导出 / 导入: PSQL12345678910-- 导出数据psql -h &lt;db_host&gt; -p &lt;db_post&gt; -U &lt;user_name&gt; -d &lt;db_name&gt; -c &quot;COPY (select * from &lt;table_name&gt; where &lt;column_name&gt; &gt;0 ) to STDOUT with csv header&quot; &gt; outer_risk_result-1-3.csv-- 导入新数据psql -h &lt;db_host&gt; -p &lt;db_post&gt; -U &lt;user_name&gt; -d &lt;db_name&gt; -c &quot;COPY &lt;table_name&gt; FROM STDIN with csv header&quot; &lt; outer_risk_result.csv---- 当导出数据指定了表头，导出时也需要指定表头psql -h &lt;db_host&gt; -p &lt;db_post&gt; -U &lt;user_name&gt; -d &lt;db_name&gt; -c &quot;COPY (select name,update_time from outer_risk_result where score&gt;0 ) to STDOUT with csv header&quot; &gt; change_data.csvpsql -h &lt;db_host&gt; -p &lt;db_post&gt; -U &lt;user_name&gt; -d &lt;db_name&gt; -c &quot;COPY outer_risk_result(name,update_time) FROM STDIN with csv header&quot; &lt; change_data.csv 服务器数据库备份： PSQL12345678# 备份pg_dump -h host -U username &lt;databasesname&gt; &gt; [filepath/backfile.bak]### 恢复psql -h host -U username -d &lt;databasename&gt; &lt; [filepath/backfile.bak] SQL 笔记 对integer类型字端进行模糊查询 1234567891011121314-- 模拟前提：表结构create table info( id int primary key, name varchar, age int);--查询：&gt; Integer属性的模糊查询：```sqlselect * from info where cast(id as VARCHAR (20)) like &#x27;11%&#x27;; 对integer 与字符串数组进行联合查询 1234567891011121314151617181920212223242526-- 模拟前提：表结构create table data_permission( id int primary key, group_ids varchar[]);create table data_group ( id int primary key, name varchar members varchar[]);-- data_permission.group_ids 存储的是data_group.id的集合。 -- 查询data_permission.group_ids关联的data_group数据。select dp.user_id ,dp.group_ids ,dg.id ,dg.name ,dg.membersfrom data_permission dp, data_group dgwhere dp.permissions @&gt; array[cast(dg.id as varchar)] group by dp.user_id, dp.permissions, dg.id, dg.name, dg.members ;","categories":[{"name":"Database","slug":"Database","permalink":"https://yinzk.github.io/categories/Database/"}],"tags":[{"name":"高端操作","slug":"高端操作","permalink":"https://yinzk.github.io/tags/%E9%AB%98%E7%AB%AF%E6%93%8D%E4%BD%9C/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://yinzk.github.io/tags/PostgreSQL/"},{"name":"Import/Export","slug":"Import-Export","permalink":"https://yinzk.github.io/tags/Import-Export/"}]},{"title":"Git 学习笔记——高端操作","slug":"Git学习笔记—常见问题解决","date":"2019-01-23T06:36:36.000Z","updated":"2019-01-23T06:36:36.000Z","comments":true,"path":"posts/d617e609.html","link":"","permalink":"https://yinzk.github.io/posts/d617e609.html","excerpt":"","text":"GIT 学习笔记Git 本地仓库仓库 远程连接http -&gt; ssh123456# 查看远程仓库类型git remote -v# 修改远层仓库git remote rm origingit remote add origin git@xxx/ios.gitgit push origin xxx windows 下IDEA 配置 terminal为git bash 终端配置 启动bash 调出属性界面 在选项tab栏中勾选使用旧版控制台 idea terminal 改为bash.exe 重启电脑 windows下中文乱码问题：12345678910111213141516171819202122232425262728293031323334353637383940Windows系统下GitBash显示的中文乱码解决方案在git 安装目录 etc 下面 添加以下配置信息1,/etc/gitconfig： [gui] encoding = utf-8 #代码库统一用urf-8,在git gui中可以正常显示中文 [i18n] commitencoding = GB2312 #log编码，window下默认gb2312,声明后发到服务器才不会乱码 [svn] pathnameencoding = GB2312 #支持中文路径2,/etc/git-completion.bash: alias ls=&#x27;ls --show-control-chars --color=auto&#x27; #ls能够正常显示中文3,/etc/inputrc: set output-meta on #bash中可以正常输入中文 set convert-meta off4,/etc/profile: export LESSHARSET=utf-8 #$ git log 命令不像其它 vcs 一样，n 条 log 从头滚到底，它会恰当地停在第一页，按 space 键再往后翻页。这是通过将 log 送给 less 处理实现的。以上即是设置 less 的字符编码，使得 $ git log 可以正常显示中文。 PS:经过实践建议更改如下：commitencoding =utf-8pathnameencoding = utf-8这样更改：gitbash中文显示正常，并且TortorseGit软件中文也会显示正常，不然两个软件会有中文显示的冲突，其中一个软件的中文会有问题。 GIT 不常用命令梳理1、将本地项目推送至远程 1git push -u orgin feature/my-feature 2、打标签 1git tag -a &lt;version&gt; -m &#x27;打标签信息&#x27; 3、删除远程分支 1git push -f origin :feature/data-migration 4、将远程删除的分支同步到本地 1git remote prune origin 5、永久删除某个文件的log历史记录 12git filter-branch -f --tree-filter &#x27;rm -rf note-doc/note-personal/note-scret/ubuntu配置信息.md&#x27; HEAD git push origin -f","categories":[{"name":"Git","slug":"Git","permalink":"https://yinzk.github.io/categories/Git/"}],"tags":[{"name":"高端操作","slug":"高端操作","permalink":"https://yinzk.github.io/tags/%E9%AB%98%E7%AB%AF%E6%93%8D%E4%BD%9C/"},{"name":"Git","slug":"Git","permalink":"https://yinzk.github.io/tags/Git/"},{"name":"版本控制","slug":"版本控制","permalink":"https://yinzk.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"}]},{"title":"主题设置笔记","slug":"主题设置笔记","date":"2019-01-23T06:36:36.000Z","updated":"2019-01-23T06:36:36.000Z","comments":true,"path":"posts/2242015193.html","link":"","permalink":"https://yinzk.github.io/posts/2242015193.html","excerpt":"","text":"主题设置笔记aplayer option default description data-id require song id / playlist id / album id / search keyword data-server require music platform: netease, tencent, kugou, xiami, baidu data-type require song, playlist, album, search, artist data-fixed false enable fixed mode data-mini false enable mini mode data-autoplay false audio autoplay data-theme #2980b9 main color data-loop all player loop play, values: ‘all’, ‘one’, ‘none’ data-order list player play order, values: ‘list’, ‘random’ data-preload auto values: ‘none’, ‘metadata’, ‘auto’ data-volume 0.7 default volume, notice that player will remember user setting, default volume will not work after user set volume themselves data-mutex true prevent to play multiple player at the same time, pause other players when this player start play data-lrctype 0 lyric type data-listfolded false indicate whether list should folded at first data-listmaxheight 340px list max height data-storagename metingjs localStorage key that store player setting 搜索引擎检索不到 blog 问题解决：blog养成记5-要让github-pages被索引到 butterFly参考链接：Butterfly 安装文档(三) 主题配置-1主题优化 文档编辑笔记：123456789101112字段说明title: 标题date: 日期tags: 标签top_img: 博客详情页顶图cover: 首页分页显示时显示的图片，可以设置http链接。title: Testdate: 2020-04-01 18:44:46tags:top_img: /img/avatar.pngcover: http://t9.baidu.com/it/u=1307125826,3433407105&amp;fm=79&amp;app=86&amp;f=JPEG?w=5760&amp;h=3240 标签设置display content TABtest1 1test1 2test1 3This is Tab 1.This is Tab 2.This is Tab 3. 特殊图标 mermaidpie title Key elements in Product X &quot;Calcium&quot; : 42.96 &quot;Potassium&quot; : 50.05 &quot;Magnesium&quot; : 9.01 &quot;Magnesium1&quot; : 1.00 &quot;Iron&quot; : 5 graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; C--&gt;F; JerryC JerryC JerryC JerryC JerryC JerryC JerryC 数学表达式： MathTex$$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ flow 流程图设置 IFRAME 嵌入 开始=>start: 开始 结束=>end: 结束 慧智操作1=>operation: 慧智操作1：模型配置（模型配置+分类管理） 慧智操作2=>subroutine: 慧智操作2：调用nlp任务发起接口（发起任务+同步配置信息） 慧智操作3=>subroutine: 慧智操作3：接收分析结果，数据处理，并最终存入ES（发起任务+同步配置信息） nlp操作1=>subroutine: nlp操作1：处理 对话分析 任务（调用慧智接口，获取文本数据） nlp操作2=>operation: nlp操作2：调用慧智接口，根据任务id同步 对话分析结果 开始->慧智操作1 慧智操作1->慧智操作2 慧智操作2->nlp操作1 nlp操作1->nlp操作2 nlp操作2->慧智操作3 慧智操作3->结束{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[{"name":"Themes","slug":"Themes","permalink":"https://yinzk.github.io/categories/Themes/"}],"tags":[{"name":"Butterfly","slug":"Butterfly","permalink":"https://yinzk.github.io/tags/Butterfly/"}]}],"categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/categories/Elasticsearch/"},{"name":"技术图谱","slug":"技术图谱","permalink":"https://yinzk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"},{"name":"外设","slug":"外设","permalink":"https://yinzk.github.io/categories/%E5%A4%96%E8%AE%BE/"},{"name":"Themes","slug":"Themes","permalink":"https://yinzk.github.io/categories/Themes/"},{"name":"Database","slug":"Database","permalink":"https://yinzk.github.io/categories/Database/"},{"name":"Git","slug":"Git","permalink":"https://yinzk.github.io/categories/Git/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://yinzk.github.io/tags/Redis/"},{"name":"性能优化","slug":"性能优化","permalink":"https://yinzk.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"常识","slug":"常识","permalink":"https://yinzk.github.io/tags/%E5%B8%B8%E8%AF%86/"},{"name":"解决办法","slug":"解决办法","permalink":"https://yinzk.github.io/tags/%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"name":"Java","slug":"Java","permalink":"https://yinzk.github.io/tags/Java/"},{"name":"学习路线","slug":"学习路线","permalink":"https://yinzk.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"外设","slug":"外设","permalink":"https://yinzk.github.io/tags/%E5%A4%96%E8%AE%BE/"},{"name":"主题美化","slug":"主题美化","permalink":"https://yinzk.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"HEXO","slug":"HEXO","permalink":"https://yinzk.github.io/tags/HEXO/"},{"name":"检索收录","slug":"检索收录","permalink":"https://yinzk.github.io/tags/%E6%A3%80%E7%B4%A2%E6%94%B6%E5%BD%95/"},{"name":"高端操作","slug":"高端操作","permalink":"https://yinzk.github.io/tags/%E9%AB%98%E7%AB%AF%E6%93%8D%E4%BD%9C/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://yinzk.github.io/tags/Elasticsearch/"},{"name":"Lock/CRUD","slug":"Lock-CRUD","permalink":"https://yinzk.github.io/tags/Lock-CRUD/"},{"name":"Demo","slug":"Demo","permalink":"https://yinzk.github.io/tags/Demo/"},{"name":"批处理","slug":"批处理","permalink":"https://yinzk.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"},{"name":"Aggregations","slug":"Aggregations","permalink":"https://yinzk.github.io/tags/Aggregations/"},{"name":"Script","slug":"Script","permalink":"https://yinzk.github.io/tags/Script/"},{"name":"Nested","slug":"Nested","permalink":"https://yinzk.github.io/tags/Nested/"},{"name":"Paging","slug":"Paging","permalink":"https://yinzk.github.io/tags/Paging/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://yinzk.github.io/tags/PostgreSQL/"},{"name":"Import/Export","slug":"Import-Export","permalink":"https://yinzk.github.io/tags/Import-Export/"},{"name":"Git","slug":"Git","permalink":"https://yinzk.github.io/tags/Git/"},{"name":"版本控制","slug":"版本控制","permalink":"https://yinzk.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"},{"name":"Butterfly","slug":"Butterfly","permalink":"https://yinzk.github.io/tags/Butterfly/"}]}